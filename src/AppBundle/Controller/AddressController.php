<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Address;
use AppBundle\Form\AddressType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Intl\Intl;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\File;



class AddressController extends Controller
{
    /**
     * Lists all address entities.
     *
     * @Route("/", name="address_index")
     * @Method("GET")
     */
    public function indexAction(Request $request)
    {

        $em = $this->getDoctrine()->getManager();

        $addresses = $em->getRepository('AppBundle:Address')->findAll();

        /**
        * @var $paginator \Knp\Component\Pager\Paginator
        **/
        $paginator = $this->get('knp_paginator');
        $result = $paginator->paginate(
            $addresses, /* query NOT result */
            $request->query->getInt('listing', 1)/*page number*/,
            $request->query->getInt('limit', 10)
            //10/*limit per page*/
        );
        return $this->render('address/index.html.twig', array(
            'addresses' => $result,
        ));
    }

    /**
     * Creates a new address entity.
     *
     * @Route("/new", name="address_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {

        $address = new Address();
        $form = $this->createForm('AppBundle\Form\AddressType', $address);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $file = $address->getPicture();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'picture' property to store the Image file name
            // instead of its contents
            $address->setPicture($fileName);


            $em = $this->getDoctrine()->getManager();
            $em->persist($address);
            $em->flush();

            $this->addFlash('notice', 'New Address Created!!!');

            return $this->redirectToRoute('address_show', array('id' => $address->getId()));
        }

        return $this->render('address/new.html.twig', array(
            'address' => $address,
            'form' => $form->createView(),
        ));
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a address entity.
     *
     * @Route("/{id}/show", name="address_show")
     * @Method("GET")
     */
    public function showAction(Address $address)
    {
        $deleteForm = $this->createDeleteForm($address);
        $Country = Intl::getRegionBundle()->getCountryName($address->getcountry());

        return $this->render('address/show.html.twig', array(
            'address' => $address,
            'delete_form' => $deleteForm->createView(),
            'country' => $Country,
        ));
    }

    /**
     * Displays a form to edit an existing address entity.
     *
     * @Route("/{id}/edit", name="address_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Address $address)
    {

         //fetch current img is exists
        $img=$address->getPicture();

        $deleteForm = $this->createDeleteForm($address);
        $editForm = $this->createForm('AppBundle\Form\AddressType', $address);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {

            //Check if new image was uploaded
            if($address->getPicture() !== null) {
                //Type hint
                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $newImage*/
                $newImage=$address->getPicture();
                $newImageName= md5(uniqid()).'.'.$newImage->guessExtension();
                $newImage->move($this->getParameter('images_directory'), $newImageName);
                $address->setPicture($newImageName);
            } else {
                //Restore old file name
                $address->setPicture($img);
            }
            $this->getDoctrine()->getManager()->flush();

            $this->addFlash('notice', 'Your Address Updated!!!');

            return $this->redirectToRoute('address_index', array('id' => $address->getId()));
        }

        return $this->render('address/edit.html.twig', array(
            'address' => $address,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * @Route("/delete/{id}", name="address_delete")
     */
    public function deleteAction($id)
    {
        $address = $this->getDoctrine()
                ->getRepository('AppBundle:Address')
                ->find($id);
        
        if (empty($address)) {
            $this->addFlash('error', 'Address not found');
            
            return $this->redirectToRoute('address_index');
        }
        
        $em = $this->getDoctrine()->getManager();
        $em->remove($address);
        $em->flush();
        
        $this->addFlash('notice', 'Address Removed');
       
        return $this->redirectToRoute('address_index');
    }

    /**
     * Creates a form to delete a address entity.
     *
     * @param Address $address The address entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Address $address)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('address_delete', array('id' => $address->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
